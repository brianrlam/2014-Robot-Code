/*----------------------------------------------------------------------------*/
/* Copyright (c) FIRST 2008. All Rights Reserved.                             */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package edu.wpi.first.wpilibj.templates;
 

import edu.wpi.first.wpilibj.SimpleRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SimpleRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.camera.AxisCamera;
import  edu.wpi.first.wpilibj.Compressor;


/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the SimpleRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class RobotTemplate extends SimpleRobot {
    private Joystick leftJoystick;
    private Joystick rightJoystick;
    private Joystick attackJS;
    private RobotDrive driveTrain;
    private Shooter shtr; 
    private Arm arm;
    private ButtonLayout bL;
    private Compressor comp;
    
    /**
     * This function is called once each time the robot enters autonomous mode.
     */
    public void autonomous() {
           //this function is called during autonomous mode, when the robot is operating only on pre-coded commands 
    }
    public void robotInit(){
        leftJoystick = new Joystick (1);
        rightJoystick = new Joystick (2);
        attackJS = new Joystick(3);
        driveTrain = new RobotDrive(4, 3, 2, 1);//1/2 left 3/4 right (real nums)
        shtr= new Shooter();
        arm= new Arm();
        bL= new ButtonLayout(leftJoystick, rightJoystick, attackJS, shtr, arm);
        comp = new Compressor(6, 7);// real numsb
        comp.start();
    }
            
    /**
     * This function is called once each time the robot enters operator control.
     */
    public void operatorControl() {
       //compressor is running
        double leftDriveVal = 0.0;
        double rightDriveVal = 0.0;
        //these two lines set the drive values to 0, meaning the robot is not moving. when the operator uses the joysticks, the values can be changed to make the robot move
        while(isOperatorControl() && isEnabled()) {
            getWatchdog().feed();
            //begin “feeding” the watchdog, which is the timer designed to keep the robot safe. if it detects the robot is not functioning correctly, it will shut down
            //leftDriveVal = (leftJoystick.getY() * -1);
            //rightDriveVal = (rightJoystick.getY() * -1); 
            //the above lines are dependent on the motors, and whether or not they are on backwards or not.
            driveTrain.tankDrive(EDC.convertVal(leftDriveVal), EDC.convertVal(rightDriveVal));
            //this line gets the values for the left and right joysticks and converts them from linear to exponential, which makes the change in velocity smoother
            bL.configureButtons();
            //Timer.delay(0.01);
           
        }
    }
    
    /**
     * This function is called once each time the robot enters test mode.
     */
    public void test() {
    
    }
}
